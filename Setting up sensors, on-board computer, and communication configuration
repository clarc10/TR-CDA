#eUAV Wireless Communication and Control System Set-Up, A Network and System Connection

1.	Establishing SSH Connection Between Ground Control Base Station (GCBS) and Raspberry Pi
To establish the initial connection between the Ground Control Base Station (GCBS) computer and the On-Board Computer (Raspberry Pi), SSH (Secure Shell) pro-tocol is used. SSH facilitates remote command line access to the Raspberry Pi. Prior to SSH access, it is imperative that both the GCBS computer and Raspberry Pi are con-nected to the same Wi-Fi network, for this project the university guest network was used. To initiate SSH connection, open the terminal on the GCBS computer and input the command: ssh eUAVpi@<pi ip address>. Here, eUAVpi represents the username of the primary user on the Raspberry Pi. In case the IP address of the Pi is unknown, it can be retrieved by connecting a monitor and keyboard to the Raspberry Pi and executing the command hostname -I in the terminal window. Upon executing the SSH command from the GCBS, the password for the Raspberry Pi's eUAVpi user must be entered. Fol-lowing successful authentication, the user gains terminal access to the Raspberry Pi from the GCBS. This terminal interface on the Raspberry Pi serves for configuration purposes and execution of scripts essential for the MQTT and MAVLink protocols.

2.	Installation of MQTT Broker for Communication Between Ground Control Base Station and Raspberry Pi 
MQTT (Message Queuing Telemetry Transport) serves as the optimal protocol for communication between the Unmanned Aerial Vehicle (UAV) and the Model-Based Systems Engineering (MBSE) model. Lightweight and versatile, MQTT facilitates mes-sage publishing and subscription among devices. A crucial component of MQTT oper-ation is the broker, which collects published messages from all client devices and dis-seminates them to subscribed clients. In the context of this project, MQTT mediates communication between the Ground Control Base Station (GCBS) and the Raspberry Pi situated onboard the eUAV. The Raspberry Pi will run the broker software, and both the Raspberry Pi and GCBS will run MQTT client software.

2.1 Setting Up MQTT Protocol
To establish the MQTT protocol, it is imperative to install an MQTT broker on the Raspberry Pi. Eclipse Mosquitto MQTT Broker, an open-source solution, is preferred for its reliability and flexibility. Follow the steps below to install and configure Mosquitto:
•	Update System
>> sudo apt update && sudo apt upgrade
•	Install Mosquitto
>> sudo apt install -y mosquitto mosquitto-clients
•	Enable Auto-start on Boot: 
>> sudo systemctl enable mosquitto.service
•	Additionally, Mosquitto must be configured to allow remote access without authentication. Open the configuration file mosquitto.conf run the following command:
>> sudo nano /etc/mosquitto/mosquitto.conf
•	Add the following lines at the end of the file:
>> listener 1883
>> allow_anonymous true


2.2 Python Client Setup on Ground Control Base Station and Raspberry Pi
To interact with the MQTT broker through Python scripts, install the paho-mqtt Python library on both the GCBS and Raspberry Pi. This library provides a client class for connecting to the MQTT broker and utility functions for message handling (pub-lishing/receiving MQTT messages). Use the following command to install paho-mqtt: python3 –m pip install paho-mqtt. For additional information and source code for pa-ho-mqtt, refer to the GitHub page of Eclipse Foundation [21]. With paho-mqtt in-stalled, both GCBS and Raspberry Pi are now equipped for MQTT communication. 

2.3. Setting Up MAVLINK Communication Between Ground Control Base Station (GCBS) and Physical Asset Pixhawk Through On-Board Raspberry Pi
MAVLink, a specialized protocol for drone and unmanned vehicle communica-tion, serves as the second protocol facilitating communication between the UAV and the SysML model. When the Raspberry Pi's UART is linked to the telemetry ports of the Pixhawk, MAVLink becomes instrumental in transmitting data between the Raspberry Pi and Pixhawk via the UART connection. To establish communication between the Ground Control Base Station (GCBS) and Pixhawk via MAVLink, MAVProxy is em-ployed to relay MAVLink messages received to the GCBS computer over UDP.

2.4. Physical Asset UART Connection Setup
To configure the UART connection between the Raspberry Pi and Pixhawk, refer to the documentation provided by [22]. This resource offers guidance on physically linking the Pixhawk and Raspberry Pi, as well as instructions for SSH access to the Raspberry Pi and MAVProxy setup.

2.5. Python Script Integration
For utilizing the MAVLink protocol in Python scripts on the GCBS, installation of the pymavlink library is imperative. pymavlink serves as a Python implementation of MAVLink, facilitating the transmission and reception of MAVLink messages. For comprehensive details and source code, refer to the GitHub page of ArduPilot [19]. In-stall pymavlink using the following command: python3 –m pip install pymavlink. 

2.6. Mavproxy Set-Up on Physical Asset On-Board Raspberry Pi
MAVProxy is a command line base station. It uses MAVLink to communicate be-tween the Raspberry Pi and Pixhawk. It allows us to forward the MAVLink messages received by the Raspberry Pi to the GCBS computer. MAVProxy was mainly used as a middleman between the Pixhawk and GCBS to allow MAVLink messages to be sent over the network. To install MAVProxy on the Raspberry Pi, run the following com-mand: python3 –m pip install MAVProxy. 

To run MAVProxy on the Raspberry Pi, first determine the serial port corre-sponding the UART connection with the Pixhawk. This is typically either /dev/ttyS0 or /dev/ttyAMA0. The baud rate of the connection is also required. To find the baud rate, check the SERIAL2_BAUD parameter on the Pixhawk (assuming the telemetry 2 port is used). Confirm that the SERIAL2_PROTOCOL parameter is set to 2, for MAVLink 2. Once the port and the baud rate are found, start MAVProxy with the following com-mand: 
>> sudo mavproxy.py --master=/dev/ttyS0 --baudrate 921600

Note that /dev/ttyS0 and 921600 will need to be replaced with the correct port and baud rate. To run MAVProxy with MAVLink forwarding to the GCBS, first find the IP of the GCBS. On a Windows computer, type ipconfig into the terminal and search for the IPv4 address of the computer. Then, on the Raspberry Pi, rerun MAVLink with the following command, replacing <GCBS_IP> with the IP of the GCBS:
>> sudo mavproxy.py --master=/dev/ttyS0 --baudrate 921600 –-out <GCBS_IP>:14550 <GCBS_IP>:14551

This sends the MAVLink messages over UDP to ports 14550 and 14551 of the GCBS. Port 14550 is typically used for MAVLink connections and is used by autopilot software in the GCBS such as Mission Planner by default. for the Communication and Control System Model, port 14551 will be used. This allows running both Mission Planner and the SysML model at the same time. While not required, MAVProxy can also be used on the GCBS instead of Mission Planner. To install MAVProxy on the GCBS, use the following command: python3 –m pip install MAVProxy. Once the Raspberry Pi has started forwarding MAVLink messages, run MAVProxy on the GCBS with the following command: sudo mavproxy.py --master= udpin:0.0.0.0:14550 –baudrate 115200. Now MAVProxy can be used as a GCBS instead of Mission Planner.


#Physical Asset On-Board Computer and (Camera) Sensor Configuration

1.	Set-Up Raspberry Pi Camera Streaming
To set-up live camera streaming from the Raspberry Pi, follow these steps:
•	Install mjpg-streamer a from the GitHub repository. To install on Linux, run: 
     		>> git clone https://github.com/jacksonliam/mjpg-streamer.git. 
•	Follow the compilation instructions.
•	Use cd to change directory into the mjpg-streamer-experimental directory
•	To start the stream, run: 
>>./mjpg_streamer -o "output_http.so -w www -p 8080" -i "input_uvc.so -rot 180 -r 1280x720 -fps 15"
-p is for port number, -rot is for rotation, -r is for resolution, -fps is for frames per second. Must include the quotes as shown above.
•	To access the live stream from the browser of any computer on the network, open the following link: http://<pi_ip_address>:8080?action=stream. Substi-tute <pi_ip_address> for the actual IP address of the Raspberry Pi. On the Raspberry Pi itself use http://localhost:8080?action=stream.

2.	Camera Configuration in eUAV Autopilot Control Software (Mission Planner)
Once the section above is completed, the stream can be setup in the Mission Plan-ner HUD. Right click on the HUD, click video, and then click Set MJPEG source. A popup will ask for the URL. Enter the URL provided above, and the stream should start in Mission Planner.

3.	Application: Hardware-Software Integration for Electric Unmanned Autonomous Vehicle ( eUAV) with Ground Control Base Station (GCBS)
The schema of Communications System and Communication Protocols and Links explored as parts of this project between the UAV Raspberry Pi and the GCBS is shown in Figure B1.. An SSH connection is used for accessing the command prompt of the Raspberry Pi from the GCBS. MQTT is used for communication between the SysML model and the Raspberry Pi. MAVProxy, running on the Raspberry Pi, forwards MAVLink messages from the Pixhawk to the ground control base station. The GCBS can send MAVLink messages back to the Pixhawk through the Raspberry Pi. Lastly, the Raspberry Pi receives camera input and hosts a webserver that allows the camera to be displayed in Mission Planner using a URL.
 
Figure B1. An overview of how the unmanned autonomous vehicle’s RTK or SSR setup should operate. GNSS 

![B1 image](https://github.com/clarc10/TR-CDA/blob/a05636617ff4b3ed106697e5c72e0068f18a77ee/B1.png?raw=true)





